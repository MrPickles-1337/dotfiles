{
  "Stateless Widget": {
    "prefix": "stless",
    "description": "Create a Stateless Widget",
    "body": [
      "class $1 extends StatelessWidget {",
      "  const $1({super.key});",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Placeholder();",
      "  }",
      "}"
    ]
  },
  "Consumer Stateful": {
    "prefix": "stful",
    "description": "Create a StatefulWidget",
    "body": [
      "class $1 extends StatefulWidget {",
      "  const $1({super.key});",
      "  @override",
      "  State<StatefulWidget> createState() => _$1State();",
      "}",
      "class _$1State extends State<$1> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Placeholder();",
      "  }",
      "}"
    ]
  },
  "Material App": {
    "prefix": "mateapp",
    "description": "Create a MaterialApp",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(const App());",
      "",
      "class App extends StatelessWidget {",
      "  const App({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      title: 'Material App',",
      "      home: Scaffold(",
      "        appBar: AppBar(",
      "          title: const Text('Material App Bar'),",
      "        ),",
      "        body: const Center(",
      "          child: Text('Hello World'),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "Cupertino App": {
    "prefix": "cupeapp",
    "description": "Create a CupertinoApp",
    "body": [
      "import 'package:flutter/cupertino.dart';",
      "",
      "void main() => runApp(const MyApp());",
      "",
      "class App extends StatelessWidget {",
      "  const App({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return const CupertinoApp(",
      "      title: 'Cupertino App',",
      "      home: CupertinoPageScaffold(",
      "        navigationBar: CupertinoNavigationBar(",
      "          middle: Text('Cupertino App Bar'),",
      "        ),",
      "        child: Center(",
      "          child: Text('Hello World'),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "InitState": {
    "prefix": "init",
    "body": [
      "@override",
      "void initState() {",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Initialize state for a StatefulWidget"
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() {",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Dispose resources for a StatefulWidget"
  },

  "Reassemble": {
    "prefix": "reassemble",
    "body": [
      "@override",
      "void reassemble(){",
      "  super.reassemble();",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
  },
  "DidChangeDependencies": {
    "prefix": "didChange",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Override build method to define widget UI"
  },
  "ListView.Builder": {
    "prefix": "lvb",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (BuildContext context, int index) {",
      "    return ${2:};",
      "  },",
      "),"
    ],
    "description": "Create a ListView builder constructor."
  },
  "GridView.Builder": {
    "prefix": "gvb",
    "body": [
      "GridView.builder(",
      "  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
      "    crossAxisCount: ${1:2},",
      "  ),",
      "  itemCount: ${2:2},",
      "  itemBuilder: (BuildContext context, int index) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Create a GridView builder constructor."
  },
  "GridView.Count": {
    "prefix": "gvc",
    "body": [
      "GridView.count(",
      "  crossAxisSpacing: ${1:1},",
      "  mainAxisSpacing: ${2:2},",
      "  crossAxisCount: ${3:2},",
      "  children: <Widget> [",
      "    ${4:}",
      "  ],",
      "),"
    ],
    "description": "Create a GridView count constructor."
  },
  "Stateful Builder": {
    "prefix": "stfulB",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Creates a StatefulBuilder."
  },
  "Layout Builder": {
    "prefix": "layoutB",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Creates a layout builder."
  },
  "Material Package": {
    "prefix": "importM",
    "body": "import 'package:flutter/material.dart';",
    "description": "Import Material package"
  },
  "Cupertino Package": {
    "prefix": "importC",
    "body": "import 'package:flutter/cupertino.dart';",
    "description": "Import Cupertino package"
  },
  "EdgeInsets `all` constructor": {
    "prefix": "edgeall",
    "body": ["EdgeInsets.all(${1})${0}"],
    "description": "EdgeInsets widget snippet with named constructor `all`"
  },
  "EdgeInsets `symmetric` constructor": {
    "prefix": "edgesym",
    "body": ["EdgeInsets.symmetric(horizontal: ${1}, vertical: ${2})${0}"],
    "description": "EdgeInsets widget snippet with named constructor `symmetric`"
  },

  "main": {
    "prefix": "main",
    "description": "Insert a main function, used as an entry point.",
    "body": ["void main(List<String> args) {", "  $0", "}"]
  },
  "try": {
    "prefix": "try",
    "description": "Insert a try/catch block.",
    "body": ["try {", "  $0", "} catch (${1:e}) {", "}"]
  },
  "if": {
    "prefix": "if",
    "description": "Insert an if statement.",
    "body": ["if ($1) {", "  $0", "}"]
  },
  "if else": {
    "prefix": "ife",
    "description": "Insert an if statement with an else block.",
    "body": ["if ($1) {", "  $0", "} else {", "}"]
  },
  "switch case": {
    "prefix": "switch",
    "description": "Insert a switch statement.",
    "body": [
      "switch ($1) {",
      "  case $2:",
      "    $0",
      "    break;",
      "  default:",
      "}"
    ]
  },
  "for": {
    "prefix": "for",
    "description": "Insert a for loop.",
    "body": ["for (var i = 0; i < ${1:count}; i++) {", "  $0", "}"]
  },
  "for in": {
    "prefix": "fori",
    "description": "Insert a for-in loop.",
    "body": ["for (var ${1:item} in ${2:items}) {", "  $0", "}"]
  },
  "while": {
    "prefix": "while",
    "description": "Insert a while loop.",
    "body": ["while ($1) {", "  $0", "}"]
  },
  "do while": {
    "prefix": "do",
    "description": "Insert a do-while loop.",
    "body": ["do {", "  $0", "} while ($1);"]
  },
  "fun": {
    "prefix": "fun",
    "description": "Insert a function definition.",
    "body": ["${3:void} ${1:name}(${2:args}) {", "  $0", "}"]
  },
  "class": {
    "prefix": "class",
    "description": "Insert a class definition.",
    "body": ["class ${1:Name} {", "  $0", "}"]
  },
  "typedef": {
    "prefix": "typedef",
    "description": "Insert a typedef.",
    "body": "typedef ${1:Type} ${2:Name}(${3:params});"
  },
  "test": {
    "prefix": "test",
    "description": "Insert a test block.",
    "body": ["test('$1', () {", "  $0", "});"]
  },
  "group": {
    "prefix": "group",
    "description": "Insert a test group block.",
    "body": ["group('$1', () {", "  $0", "});"]
  },
  "enum": {
    "prefix": "enum",
    "description": "Insert a enum.",
    "body": ["enum ${1:Name} {", "  $0", "}"]
  },
  "Create a freezed Class": {
    "prefix": "frc",
    "description": "Creates a freezed Class inside a dartlang file. Useful for flutter and dart for web.",
    "body": [
      "@freezed",
      "sealed class $1 with _\\$$1 {",
      "",
      "\tfactory $1() = _$1;",
      "",
      "\tfactory $1.fromJson(Map<String, dynamic> json) => _\\$$1FromJson(json);",
      "}"
    ]
  },
  "Setup file for freezed annotation & Code Gen": {
    "prefix": "frf",
    "description": "Setup a file which will have freezed annotated classes.",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part 'file.freezed.dart';",
      "part 'file.g.dart';",
      "",
      "@freezed",
      "sealed class $1 with _\\$$1 {",
      "",
      "\tfactory $1() = _$1;",
      "",
      "\tfactory $1.fromJson(Map<String, dynamic> json) => _\\$$1FromJson(json);",
      "}"
    ]
  },
  "Main axis alignment": {
    "prefix": "maa",
    "body": "mainAxisAlignment: MainAxisAlignment.$1,",
    "description": "yep"
  },
  "Cross axis alignment": {
    "prefix": "caa",
    "body": "crossAxisAlignment: CrossAxisAlignment.$1,",
    "description": "yep"
  }
}
